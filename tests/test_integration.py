"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
"""
import pytest
from unittest.mock import AsyncMock, MagicMock, patch
from main import (
    add_start, add_title, add_description, add_cover, add_isbn,
    add_authors, add_series, add_series_order, finalize_book,
    list_books, my_books, search_books, search_start, search_process,
    status_start, status_select_book, status_select_status,
    delete_book_start, delete_book_select, delete_book_confirm,
    edit_book_start, edit_book_select, edit_field_select, edit_value_process
)

@pytest.fixture(autouse=True)
def patch_main_db(mock_db_connection):
    with patch("main.cursor", mock_db_connection.cursor()), patch("main.conn", mock_db_connection):
        yield

class TestCompleteBookWorkflow:
    """–¢–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –∫–Ω–∏–≥–æ–π"""
    
    @pytest.mark.asyncio
    async def test_complete_book_addition_workflow(self, mock_update, mock_context, mock_db_connection, mock_photo):
        """–¢–µ—Å—Ç: –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏"""
        # Arrange
        mock_update.message.photo = [mock_photo]
        
        # Act & Assert - –®–∞–≥ 1: –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        result = await add_start(mock_update, mock_context)
        assert result == 0  # ADD_TITLE
        
        # –®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        mock_update.message.text = "–í–æ–π–Ω–∞ –∏ –º–∏—Ä"
        result = await add_title(mock_update, mock_context)
        assert result == 1  # ADD_DESC
        assert mock_context.user_data['new_book']['title'] == "–í–æ–π–Ω–∞ –∏ –º–∏—Ä"
        
        # –®–∞–≥ 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
        mock_update.message.text = "–†–æ–º–∞–Ω-—ç–ø–æ–ø–µ—è –õ—å–≤–∞ –¢–æ–ª—Å—Ç–æ–≥–æ"
        result = await add_description(mock_update, mock_context)
        assert result == 2  # ADD_COVER
        assert mock_context.user_data['new_book']['description'] == "–†–æ–º–∞–Ω-—ç–ø–æ–ø–µ—è –õ—å–≤–∞ –¢–æ–ª—Å—Ç–æ–≥–æ"
        
        # –®–∞–≥ 4: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏
        result = await add_cover(mock_update, mock_context)
        assert result == 3  # ADD_ISBN
        assert 'image_blob' in mock_context.user_data['new_book']
        
        # –®–∞–≥ 5: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ISBN
        mock_update.message.text = "9783161484100"
        result = await add_isbn(mock_update, mock_context)
        assert result == 4  # ADD_AUTHORS
        assert mock_context.user_data['new_book']['isbn'] == "9783161484100"
        
        # –®–∞–≥ 6: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤
        mock_update.message.text = "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π"
        result = await add_authors(mock_update, mock_context)
        assert result == 5  # ADD_SERIES
        assert mock_context.user_data['new_book']['authors'] == ["–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π"]
        
        # –®–∞–≥ 7: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–∏
        mock_update.message.text = "–†—É—Å—Å–∫–∞—è –∫–ª–∞—Å—Å–∏–∫–∞"
        result = await add_series(mock_update, mock_context)
        assert result == 6  # ADD_SERIES_ORDER
        
        # –®–∞–≥ 8: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –≤ —Å–µ—Ä–∏–∏
        mock_update.message.text = "1"
        result = await add_series_order(mock_update, mock_context)
        assert result == -1  # ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–∏–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ
        cursor = mock_db_connection.cursor()
        cursor.execute("SELECT title, description, isbn FROM books WHERE title = ?", ("–í–æ–π–Ω–∞ –∏ –º–∏—Ä",))
        book = cursor.fetchone()
        assert book is not None
        assert book[0] == "–í–æ–π–Ω–∞ –∏ –º–∏—Ä"
        assert book[1] == "–†–æ–º–∞–Ω-—ç–ø–æ–ø–µ—è –õ—å–≤–∞ –¢–æ–ª—Å—Ç–æ–≥–æ"
        assert book[2] == "9783161484100"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–æ–≤
        cursor.execute("""
            SELECT a.name FROM authors a 
            JOIN book_authors ba ON a.id = ba.author_id 
            JOIN books b ON ba.book_id = b.id 
            WHERE b.title = ?
        """, ("–í–æ–π–Ω–∞ –∏ –º–∏—Ä",))
        authors = [row[0] for row in cursor.fetchall()]
        assert "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π" in authors
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–∏—é
        cursor.execute("""
            SELECT s.name, b.series_order FROM series s 
            JOIN books b ON s.id = b.series_id 
            WHERE b.title = ?
        """, ("–í–æ–π–Ω–∞ –∏ –º–∏—Ä",))
        series_info = cursor.fetchone()
        assert series_info is not None
        assert series_info[0] == "–†—É—Å—Å–∫–∞—è –∫–ª–∞—Å—Å–∏–∫–∞"
        assert series_info[1] == 1
    
    @pytest.mark.asyncio
    async def test_complete_book_without_series_workflow(self, mock_update, mock_context, mock_db_connection, mock_photo):
        """–¢–µ—Å—Ç: –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏ –±–µ–∑ —Å–µ—Ä–∏–∏"""
        # Arrange
        mock_update.message.photo = [mock_photo]
        
        # Act & Assert - –®–∞–≥ 1-6: –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ç–µ—Å—Ç—É
        await add_start(mock_update, mock_context)
        
        mock_update.message.text = "–ê–Ω–Ω–∞ –ö–∞—Ä–µ–Ω–∏–Ω–∞"
        await add_title(mock_update, mock_context)
        
        mock_update.message.text = "–†–æ–º–∞–Ω –õ—å–≤–∞ –¢–æ–ª—Å—Ç–æ–≥–æ"
        await add_description(mock_update, mock_context)
        
        await add_cover(mock_update, mock_context)
        
        mock_update.message.text = "9783161484101"
        await add_isbn(mock_update, mock_context)
        
        mock_update.message.text = "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π"
        await add_authors(mock_update, mock_context)
        
        # –®–∞–≥ 7: –ü—Ä–æ–ø—É—Å–∫ —Å–µ—Ä–∏–∏
        mock_update.message.text = "-"
        result = await add_series(mock_update, mock_context)
        assert result == -1  # ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–∏–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –±–µ–∑ —Å–µ—Ä–∏–∏
        cursor = mock_db_connection.cursor()
        cursor.execute("SELECT title, series_id FROM books WHERE title = ?", ("–ê–Ω–Ω–∞ –ö–∞—Ä–µ–Ω–∏–Ω–∞",))
        book = cursor.fetchone()
        assert book is not None
        assert book[1] is None  # series_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None


class TestCompleteStatusWorkflow:
    """–¢–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
    
    @pytest.mark.asyncio
    async def test_complete_status_workflow(self, mock_update, mock_context, mock_db_connection):
        """–¢–µ—Å—Ç: –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–Ω–∏–≥–∏"""
        # Arrange - –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É
        cursor = mock_db_connection.cursor()
        cursor.execute("INSERT INTO books (title, description) VALUES (?, ?)", ("–í–æ–π–Ω–∞ –∏ –º–∏—Ä", "–û–ø–∏—Å–∞–Ω–∏–µ"))
        book_id = cursor.lastrowid
        mock_db_connection.commit()
        
        # Act & Assert - –®–∞–≥ 1: –ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        await status_start(mock_update, mock_context)
        
        # –®–∞–≥ 2: –í—ã–±–æ—Ä –∫–Ω–∏–≥–∏
        mock_update.message.text = "1"
        mock_context.user_data['books_list'] = [(1, "–í–æ–π–Ω–∞ –∏ –º–∏—Ä")]
        mock_update.effective_user.id = 12345
        await status_select_book(mock_update, mock_context)
        assert mock_context.user_data['selected_book'] == "–í–æ–π–Ω–∞ –∏ –º–∏—Ä"
        
        # –®–∞–≥ 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ "—á–∏—Ç–∞—é"
        mock_update.effective_user.id = 12345
        mock_update.message.text = "üìñ –ß–∏—Ç–∞—é"
        result = await status_select_status(mock_update, mock_context)
        assert result == -1  # ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        cursor.execute("SELECT status FROM user_books WHERE user_id = ? AND book_id = ?", (12345, book_id))
        status = cursor.fetchone()
        assert status is not None
        assert status[0] == "reading"
        
        # –®–∞–≥ 4: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "–ø—Ä–æ—á–∏—Ç–∞–Ω–æ"
        await status_start(mock_update, mock_context)
        mock_update.message.text = "1"
        mock_update.effective_user.id = 12345
        await status_select_book(mock_update, mock_context)
        mock_update.effective_user.id = 12345
        mock_update.message.text = "‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ"
        await status_select_status(mock_update, mock_context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω
        cursor.execute("SELECT status FROM user_books WHERE user_id = ? AND book_id = ?", (12345, book_id))
        status = cursor.fetchone()
        assert status is not None
        assert status[0] == "finished"


class TestCompleteSearchWorkflow:
    """–¢–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∏—Å–∫–∞"""
    
    @pytest.mark.asyncio
    async def test_complete_search_workflow(self, mock_update, mock_context, mock_db_connection):
        """–¢–µ—Å—Ç: –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥"""
        # Arrange - –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥–∏ –∏ –∞–≤—Ç–æ—Ä–æ–≤
        cursor = mock_db_connection.cursor()
        cursor.execute("INSERT INTO books (title, description) VALUES (?, ?)", ("–í–æ–π–Ω–∞ –∏ –º–∏—Ä", "–û–ø–∏—Å–∞–Ω–∏–µ"))
        book1_id = cursor.lastrowid
        cursor.execute("INSERT INTO books (title, description) VALUES (?, ?)", ("–ê–Ω–Ω–∞ –ö–∞—Ä–µ–Ω–∏–Ω–∞", "–û–ø–∏—Å–∞–Ω–∏–µ"))
        book2_id = cursor.lastrowid
        cursor.execute("INSERT INTO authors (name) VALUES (?)", ("–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π",))
        author_id = cursor.lastrowid
        cursor.execute("INSERT INTO book_authors (book_id, author_id) VALUES (?, ?)", (book1_id, author_id))
        cursor.execute("INSERT INTO book_authors (book_id, author_id) VALUES (?, ?)", (book2_id, author_id))
        mock_db_connection.commit()
        
        # –í–ê–ñ–ù–û: –¥–æ–±–∞–≤–∏—Ç—å cursor –∏ conn –≤ mock_context
        mock_context.cursor = cursor
        mock_context.conn = mock_db_connection
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –≤—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü
        print("BOOKS:", list(cursor.execute("SELECT id, title FROM books")))
        print("AUTHORS:", list(cursor.execute("SELECT id, name FROM authors")))
        print("BOOK_AUTHORS:", list(cursor.execute("SELECT book_id, author_id FROM book_authors")))
        
        # Act & Assert - –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        await search_start(mock_update, mock_context)
        mock_update.message.text = "–í–æ–π–Ω–∞"
        result = await search_process(mock_update, mock_context)
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        # (print —É–¥–∞–ª—ë–Ω, —Ç–∞–∫ –∫–∞–∫ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è LOWER())
        assert result == -1  # ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
        assert mock_update.message.reply_text.call_count == 2
        response_text = mock_update.message.reply_text.call_args_list[1][0][0]
        assert "–í–æ–π–Ω–∞ –∏ –º–∏—Ä" in response_text
        assert "–ê–Ω–Ω–∞ –ö–∞—Ä–µ–Ω–∏–Ω–∞" not in response_text
        
        # –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ—Ä—É
        mock_update.message.reply_text.reset_mock()
        await search_start(mock_update, mock_context)
        mock_update.message.text = "–¢–æ–ª—Å—Ç–æ–π"
        await search_process(mock_update, mock_context)
        
        response_text = mock_update.message.reply_text.call_args[0][0]
        assert "–í–æ–π–Ω–∞ –∏ –º–∏—Ä" in response_text
        assert "–ê–Ω–Ω–∞ –ö–∞—Ä–µ–Ω–∏–Ω–∞" in response_text
        assert "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π" in response_text


class TestCompleteDeleteWorkflow:
    """–¢–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è"""
    
    @pytest.mark.asyncio
    async def test_complete_delete_workflow(self, mock_update, mock_context, mock_db_connection):
        """–¢–µ—Å—Ç: –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏"""
        # Arrange - –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É
        cursor = mock_db_connection.cursor()
        cursor.execute("INSERT INTO books (title, description) VALUES (?, ?)", ("–í–æ–π–Ω–∞ –∏ –º–∏—Ä", "–û–ø–∏—Å–∞–Ω–∏–µ"))
        book_id = cursor.lastrowid
        cursor.execute("INSERT INTO authors (name) VALUES (?)", ("–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π",))
        author_id = cursor.lastrowid
        cursor.execute("INSERT INTO book_authors (book_id, author_id) VALUES (?, ?)", (book_id, author_id))
        cursor.execute("INSERT INTO user_books (user_id, book_id, status) VALUES (?, ?, ?)", (12345, book_id, "reading"))
        mock_db_connection.commit()
        
        # Act & Assert - –®–∞–≥ 1: –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è
        await delete_book_start(mock_update, mock_context)
        
        # –®–∞–≥ 2: –í—ã–±–æ—Ä –∫–Ω–∏–≥–∏
        mock_update.message.text = "1"
        mock_context.user_data['available_books'] = ["–í–æ–π–Ω–∞ –∏ –º–∏—Ä"]
        await delete_book_select(mock_update, mock_context)
        assert mock_context.user_data['book_to_delete'] == book_id
        
        # –®–∞–≥ 3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        mock_update.message.text = "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å"
        result = await delete_book_confirm(mock_update, mock_context)
        assert result == -1  # ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–∏–≥–∞ —É–¥–∞–ª–µ–Ω–∞
        cursor.execute("SELECT * FROM books WHERE id = ?", (book_id,))
        assert cursor.fetchone() is None
        cursor.execute("SELECT * FROM book_authors WHERE book_id = ?", (book_id,))
        assert cursor.fetchone() is None
        cursor.execute("SELECT * FROM user_books WHERE book_id = ?", (book_id,))
        assert cursor.fetchone() is None


class TestCompleteEditWorkflow:
    """–¢–µ—Å—Ç—ã –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    @pytest.mark.asyncio
    async def test_complete_edit_workflow(self, mock_update, mock_context, mock_db_connection):
        """–¢–µ—Å—Ç: –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏"""
        # Arrange - –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É
        cursor = mock_db_connection.cursor()
        cursor.execute("INSERT INTO books (title, description) VALUES (?, ?)", ("–°—Ç–∞—Ä–∞—è –∫–Ω–∏–≥–∞", "–°—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"))
        book_id = cursor.lastrowid
        mock_db_connection.commit()
        
        # Act & Assert - –®–∞–≥ 1: –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await edit_book_start(mock_update, mock_context)
        
        # –®–∞–≥ 2: –í—ã–±–æ—Ä –∫–Ω–∏–≥–∏
        mock_update.message.text = "1"
        mock_context.user_data['available_books'] = ["–°—Ç–∞—Ä–∞—è –∫–Ω–∏–≥–∞"]
        await edit_book_select(mock_update, mock_context)
        assert mock_context.user_data['book_to_edit'] == book_id
        
        # –®–∞–≥ 3: –í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        mock_update.message.text = "üìù –û–ø–∏—Å–∞–Ω–∏–µ"
        result = await edit_field_select(mock_update, mock_context)
        assert result == 15  # EDIT_VALUE
        assert mock_context.user_data['edit_field'] == 'description'
        
        # –®–∞–≥ 4: –í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        mock_update.message.text = "–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
        result = await edit_value_process(mock_update, mock_context)
        assert result == -1  # ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        cursor.execute("SELECT description FROM books WHERE id = ?", (book_id,))
        assert cursor.fetchone()[0] == "–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"


class TestCrossFunctionality:
    """–¢–µ—Å—Ç—ã —Å–∫–≤–æ–∑–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    
    @pytest.mark.asyncio
    async def test_book_appears_in_all_lists(self, mock_update, mock_context, mock_db_connection, mock_photo):
        """–¢–µ—Å—Ç: –∫–Ω–∏–≥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤–æ –≤—Å–µ—Ö —Å–ø–∏—Å–∫–∞—Ö –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è"""
        # Arrange - –ü–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É
        cursor = mock_db_connection.cursor()
        mock_context.cursor = cursor
        mock_context.conn = mock_db_connection
        mock_update.effective_user.id = 12345
        mock_context.effective_user = mock_update.effective_user

        mock_update.message.photo = [mock_photo]
        await add_start(mock_update, mock_context)
        mock_update.message.text = "–í–æ–π–Ω–∞ –∏ –º–∏—Ä"
        await add_title(mock_update, mock_context)
        mock_update.message.text = "–†–æ–º–∞–Ω-—ç–ø–æ–ø–µ—è"
        await add_description(mock_update, mock_context)
        await add_cover(mock_update, mock_context)
        mock_update.message.text = "9783161484100"
        await add_isbn(mock_update, mock_context)
        mock_update.message.text = "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π"
        await add_authors(mock_update, mock_context)
        mock_update.message.text = "-"
        await add_series(mock_update, mock_context)
        
        # Act & Assert - –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
        mock_update.message.reply_text.reset_mock()
        await list_books(mock_update, mock_context)
        response_text = mock_update.message.reply_text.call_args[0][0]
        assert "–í–æ–π–Ω–∞ –∏ –º–∏—Ä" in response_text
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ø–æ–∏—Å–∫–µ
        mock_update.message.reply_text.reset_mock()
        await search_start(mock_update, mock_context)
        mock_update.message.text = "–í–æ–π–Ω–∞"
        await search_process(mock_update, mock_context)
        response_text = mock_update.message.reply_text.call_args[0][0]
        assert "–í–æ–π–Ω–∞ –∏ –º–∏—Ä" in response_text

    @pytest.mark.asyncio
    async def test_status_affects_my_books(self, mock_update, mock_context, mock_db_connection):
        """–¢–µ—Å—Ç: —Å—Ç–∞—Ç—É—Å –≤–ª–∏—è–µ—Ç –Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ '–ú–æ–∏ –∫–Ω–∏–≥–∏'"""
        # Arrange - –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        cursor = mock_db_connection.cursor()
        mock_context.cursor = cursor
        mock_context.conn = mock_db_connection
        mock_update.effective_user.id = 12345
        mock_context.effective_user = mock_update.effective_user

        cursor.execute("INSERT INTO books (title, description) VALUES (?, ?)", ("–í–æ–π–Ω–∞ –∏ –º–∏—Ä", "–û–ø–∏—Å–∞–Ω–∏–µ"))
        book_id = cursor.lastrowid
        cursor.execute("INSERT INTO user_books (user_id, book_id, status) VALUES (?, ?, ?)", (12345, book_id, "reading"))
        mock_db_connection.commit()
        
        # Act
        await my_books(mock_update, mock_context)
        
        # Assert
        response_text = mock_update.message.reply_text.call_args[0][0]
        assert "–í–æ–π–Ω–∞ –∏ –º–∏—Ä" in response_text
        assert "—á–∏—Ç–∞—é" in response_text.lower()
        
        # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
        mock_update.message.reply_text.reset_mock()
        await status_start(mock_update, mock_context)
        mock_update.message.text = "1"
        mock_context.user_data['available_books'] = ["–í–æ–π–Ω–∞ –∏ –º–∏—Ä"]
        await status_select_book(mock_update, mock_context)
        mock_update.message.text = "‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ"
        await status_select_status(mock_update, mock_context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        mock_update.message.reply_text.reset_mock()
        await my_books(mock_update, mock_context)
        response_text = mock_update.message.reply_text.call_args[0][0]
        assert "–ø—Ä–æ—á–∏—Ç–∞–Ω–æ" in response_text.lower() 