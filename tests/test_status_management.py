"""
–¢–µ—Å—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∫–Ω–∏–≥
"""
import pytest
from unittest.mock import AsyncMock, MagicMock
from main import (
    status_start, status_select_book, status_select_status, status_cancel
)
from telegram.ext import ConversationHandler


class TestStatusManagement:
    """–¢–µ—Å—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∫–Ω–∏–≥"""
    
    @pytest.mark.asyncio
    async def test_status_start(self, mock_update, mock_context, mock_db_connection):
        """–¢–µ—Å—Ç: –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        # Arrange
        cursor = mock_db_connection.cursor()
        cursor.execute("INSERT INTO books (title, description) VALUES (?, ?)", ("–í–æ–π–Ω–∞ –∏ –º–∏—Ä", "–û–ø–∏—Å–∞–Ω–∏–µ"))
        mock_db_connection.commit()
        
        # Act
        await status_start(mock_update, mock_context)
        
        # Assert
        mock_update.message.reply_text.assert_called_once()
        assert "–≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É" in mock_update.message.reply_text.call_args[0][0].lower()
    
    @pytest.mark.asyncio
    async def test_status_start_no_books(self, mock_update, mock_context, mock_db_connection):
        """–¢–µ—Å—Ç: –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–Ω–∏–≥"""
        # Act
        await status_start(mock_update, mock_context)
        
        # Assert
        mock_update.message.reply_text.assert_called_once()
        assert "–≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –Ω–µ—Ç –∫–Ω–∏–≥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞" in mock_update.message.reply_text.call_args[0][0].lower()
    
    @pytest.mark.asyncio
    async def test_status_select_book_valid(self, mock_update, mock_context, mock_db_connection):
        """–¢–µ—Å—Ç: –≤—ã–±–æ—Ä –∫–Ω–∏–≥–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        # Arrange
        cursor = mock_db_connection.cursor()
        cursor.execute("INSERT INTO books (title, description) VALUES (?, ?)", ("–í–æ–π–Ω–∞ –∏ –º–∏—Ä", "–û–ø–∏—Å–∞–Ω–∏–µ"))
        mock_db_connection.commit()
        
        mock_update.message.text = "1"
        mock_context.user_data['available_books'] = ["–í–æ–π–Ω–∞ –∏ –º–∏—Ä"]
        
        # Act
        await status_select_book(mock_update, mock_context)
        
        # Assert
        assert mock_context.user_data['selected_book'] == "–í–æ–π–Ω–∞ –∏ –º–∏—Ä"
        mock_update.message.reply_text.assert_called_once()
        response_text = mock_update.message.reply_text.call_args[0][0]
        assert "–≤—ã–±–µ—Ä–∏—Ç–µ" in response_text.lower()
        assert "—Å—Ç–∞—Ç—É—Å" in response_text.lower()
    
    @pytest.mark.asyncio
    async def test_status_select_book_invalid(self, mock_update, mock_context, mock_db_connection):
        """–¢–µ—Å—Ç: –≤—ã–±–æ—Ä –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–π –∫–Ω–∏–≥–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        # Arrange
        cursor = mock_db_connection.cursor()
        cursor.execute("INSERT INTO books (title, description) VALUES (?, ?)", ("–í–æ–π–Ω–∞ –∏ –º–∏—Ä", "–û–ø–∏—Å–∞–Ω–∏–µ"))
        mock_db_connection.commit()
        
        mock_update.message.text = "999"
        mock_context.user_data['available_books'] = ["–í–æ–π–Ω–∞ –∏ –º–∏—Ä"]
        
        # Act
        await status_select_book(mock_update, mock_context)
        
        # Assert
        mock_update.message.reply_text.assert_called_once()
        assert "–Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä" in mock_update.message.reply_text.call_args[0][0].lower()
    
    @pytest.mark.asyncio
    async def test_status_select_status_planning(self, mock_update, mock_context, mock_db_connection):
        """–¢–µ—Å—Ç: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ '–ø–ª–∞–Ω–∏—Ä—É—é'"""
        # Arrange
        cursor = mock_db_connection.cursor()
        cursor.execute("INSERT INTO books (title, description) VALUES (?, ?)", ("–í–æ–π–Ω–∞ –∏ –º–∏—Ä", "–û–ø–∏—Å–∞–Ω–∏–µ"))
        book_id = cursor.lastrowid
        mock_db_connection.commit()
        
        mock_update.message.text = "üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ"
        mock_context.user_data['selected_book'] = "–í–æ–π–Ω–∞ –∏ –º–∏—Ä"
        mock_update.effective_user.id = 12345
        
        # Act
        result = await status_select_status(mock_update, mock_context)
        
        # Assert
        assert result == ConversationHandler.END
        mock_update.message.reply_text.assert_called()
        assert "—Å—Ç–∞—Ç—É—Å –∫–Ω–∏–≥–∏" in mock_update.message.reply_text.call_args[0][0].lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ
        cursor.execute("SELECT status FROM user_books WHERE user_id = ? AND book_id = ?", (12345, book_id))
        result = cursor.fetchone()
        assert result is not None
        assert result[0] == "planning"
    
    @pytest.mark.asyncio
    async def test_status_select_status_reading(self, mock_update, mock_context, mock_db_connection):
        """–¢–µ—Å—Ç: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ '—á–∏—Ç–∞—é'"""
        # Arrange
        cursor = mock_db_connection.cursor()
        cursor.execute("INSERT INTO books (title, description) VALUES (?, ?)", ("–í–æ–π–Ω–∞ –∏ –º–∏—Ä", "–û–ø–∏—Å–∞–Ω–∏–µ"))
        book_id = cursor.lastrowid
        mock_db_connection.commit()
        
        mock_update.message.text = "üìñ –ß–∏—Ç–∞—é"
        mock_context.user_data['selected_book'] = "–í–æ–π–Ω–∞ –∏ –º–∏—Ä"
        mock_update.effective_user.id = 12345
        
        # Act
        result = await status_select_status(mock_update, mock_context)
        
        # Assert
        assert result == ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ
        cursor.execute("SELECT status FROM user_books WHERE user_id = ? AND book_id = ?", (12345, book_id))
        result = cursor.fetchone()
        assert result is not None
        assert result[0] == "reading"
    
    @pytest.mark.asyncio
    async def test_status_select_status_finished(self, mock_update, mock_context, mock_db_connection):
        """–¢–µ—Å—Ç: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ '–ø—Ä–æ—á–∏—Ç–∞–Ω–æ'"""
        # Arrange
        cursor = mock_db_connection.cursor()
        cursor.execute("INSERT INTO books (title, description) VALUES (?, ?)", ("–í–æ–π–Ω–∞ –∏ –º–∏—Ä", "–û–ø–∏—Å–∞–Ω–∏–µ"))
        book_id = cursor.lastrowid
        mock_db_connection.commit()
        
        mock_update.message.text = "‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ"
        mock_context.user_data['selected_book'] = "–í–æ–π–Ω–∞ –∏ –º–∏—Ä"
        mock_update.effective_user.id = 12345
        
        # Act
        result = await status_select_status(mock_update, mock_context)
        
        # Assert
        assert result == ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ
        cursor.execute("SELECT status FROM user_books WHERE user_id = ? AND book_id = ?", (12345, book_id))
        result = cursor.fetchone()
        assert result is not None
        assert result[0] == "finished"
    
    @pytest.mark.asyncio
    async def test_status_select_status_cancelled(self, mock_update, mock_context, mock_db_connection):
        """–¢–µ—Å—Ç: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ '–æ—Ç–º–µ–Ω–µ–Ω–æ'"""
        # Arrange
        cursor = mock_db_connection.cursor()
        cursor.execute("INSERT INTO books (title, description) VALUES (?, ?)", ("–í–æ–π–Ω–∞ –∏ –º–∏—Ä", "–û–ø–∏—Å–∞–Ω–∏–µ"))
        book_id = cursor.lastrowid
        mock_db_connection.commit()
        
        mock_update.message.text = "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ"
        mock_context.user_data['selected_book'] = "–í–æ–π–Ω–∞ –∏ –º–∏—Ä"
        mock_update.effective_user.id = 12345
        
        # Act
        result = await status_select_status(mock_update, mock_context)
        
        # Assert
        assert result == ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ
        cursor.execute("SELECT status FROM user_books WHERE user_id = ? AND book_id = ?", (12345, book_id))
        result = cursor.fetchone()
        assert result is not None
        assert result[0] == "cancelled"
    
    @pytest.mark.asyncio
    async def test_status_select_status_invalid(self, mock_update, mock_context, mock_db_connection):
        """–¢–µ—Å—Ç: –ø–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Å—Ç–∞—Ç—É—Å"""
        # Arrange
        cursor = mock_db_connection.cursor()
        cursor.execute("INSERT INTO books (title, description) VALUES (?, ?)", ("–í–æ–π–Ω–∞ –∏ –º–∏—Ä", "–û–ø–∏—Å–∞–Ω–∏–µ"))
        mock_db_connection.commit()
        
        mock_update.message.text = "–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
        mock_context.user_data['selected_book'] = "–í–æ–π–Ω–∞ –∏ –º–∏—Ä"
        mock_update.effective_user.id = 12345
        
        # Act
        await status_select_status(mock_update, mock_context)
        
        # Assert
        mock_update.message.reply_text.assert_called_once()
        assert "–Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å" in mock_update.message.reply_text.call_args[0][0].lower()
    
    @pytest.mark.asyncio
    async def test_status_update_existing(self, mock_update, mock_context, mock_db_connection):
        """–¢–µ—Å—Ç: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
        # Arrange
        cursor = mock_db_connection.cursor()
        cursor.execute("INSERT INTO books (title, description) VALUES (?, ?)", ("–í–æ–π–Ω–∞ –∏ –º–∏—Ä", "–û–ø–∏—Å–∞–Ω–∏–µ"))
        book_id = cursor.lastrowid
        cursor.execute("INSERT INTO user_books (user_id, book_id, status) VALUES (?, ?, ?)", (12345, book_id, "planning"))
        mock_db_connection.commit()
        
        mock_update.message.text = "üìñ –ß–∏—Ç–∞—é"
        mock_context.user_data['selected_book'] = "–í–æ–π–Ω–∞ –∏ –º–∏—Ä"
        mock_update.effective_user.id = 12345
        
        # Act
        result = await status_select_status(mock_update, mock_context)
        
        # Assert
        assert result == ConversationHandler.END
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω
        cursor.execute("SELECT status FROM user_books WHERE user_id = ? AND book_id = ?", (12345, book_id))
        result = cursor.fetchone()
        assert result is not None
        assert result[0] == "reading"
    
    @pytest.mark.asyncio
    async def test_status_cancel(self, mock_update, mock_context):
        """–¢–µ—Å—Ç: –æ—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
        # Act
        result = await status_cancel(mock_update, mock_context)
        
        # Assert
        assert result == ConversationHandler.END
        mock_update.message.reply_text.assert_called_once()
        assert "–æ—Ç–º–µ–Ω–µ–Ω–æ" in mock_update.message.reply_text.call_args[0][0].lower() 