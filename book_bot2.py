from logging import raiseExceptions

import logging
import sqlite3
import asyncio
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes
)

IDS = {7286822228, }
# üîß –õ–æ–≥–∏
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# üìö –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
conn = sqlite3.connect("books.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS books (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    title TEXT,
    is_read BOOLEAN DEFAULT 0
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS books_users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    book_id INTEGER,book
    is_read BOOLEAN DEFAULT 0
)
""")

conn.commit()
def ensure_blob_column():
    cursor.execute("PRAGMA table_info(books)")
    columns = [col[1] for col in cursor.fetchall()]
    if "image_blob" not in columns:
        cursor.execute("ALTER TABLE books ADD COLUMN image_blob BLOB")
        conn.commit()

ensure_blob_column()

# üîπ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info('')
    if update.effective_user.id not in IDS:
        logger.debug('wrong user %s', update.effective_user.id)
        raise Exception("wrong user")
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ üìö\n"
        "‚ûï /add <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É\n"
        "‚úÖ /read <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—É—é\n"
        "üìã /list ‚Äî –≤—Å–µ –∫–Ω–∏–≥–∏\n"
        "üìñ /list_read ‚Äî –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ\n"
        "üìï /list_unread ‚Äî –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ\n"
        "üßπ /clear ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–Ω–∏–≥–∏"
    )

async def add_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    title = " ".join(context.args).strip()
    if not title:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add")
        return

    cursor.execute("INSERT INTO books (user_id, title) VALUES (?, ?)", (user_id, title))
    conn.commit()
    await update.message.reply_text(f"–ö–Ω–∏–≥–∞ ¬´{title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

async def mark_read(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    title = " ".join(context.args).strip()
    if not title:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /read")
        return

    cursor.execute("""
        UPDATE books
        SET is_read = 1
        WHERE user_id = ? AND title = ?
    """, (user_id, title))
    conn.commit()

    if cursor.rowcount == 0:
        await update.message.reply_text("–¢–∞–∫–æ–π –∫–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        await update.message.reply_text(f"–ö–Ω–∏–≥–∞ ¬´{title}¬ª –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–∞—è!")

async def list_books(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    cursor.execute("SELECT title, is_read FROM books WHERE user_id = ?", (user_id,))
    rows = cursor.fetchall()

    if not rows:
        await update.message.reply_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏.")
        return

    msg = "üìö –¢–≤–æ–∏ –∫–Ω–∏–≥–∏:\n"
    for title, is_read in rows:
        status = "‚úÖ" if is_read else "‚ùå"
        msg += f"{status} {title}\n"

    await update.message.reply_text(msg)

async def list_read(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    cursor.execute("SELECT title FROM books WHERE user_id = ? AND is_read = 1", (user_id,))
    rows = cursor.fetchall()

    if not rows:
        await update.message.reply_text("–ü—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∫–Ω–∏–≥ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    msg = "üìñ –ü—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:\n" + "\n".join(f"‚úÖ {row[0]}" for row in rows)
    await update.message.reply_text(msg)

async def list_unread(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    cursor.execute("SELECT title FROM books WHERE user_id = ? AND is_read = 0", (user_id,))
    rows = cursor.fetchall()

    if not rows:
        await update.message.reply_text("–í—Å–µ –∫–Ω–∏–≥–∏ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã üéâ")
        return

    msg = "üìï –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏:\n" + "\n".join(f"‚ùå {row[0]}" for row in rows)
    await update.message.reply_text(msg)

async def clear_books(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    cursor.execute("DELETE FROM books WHERE user_id = ?", (user_id,))
    conn.commit()
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –æ—á–∏—â–µ–Ω.")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    app = ApplicationBuilder().token("7885426006:AAFg9OWfl4nw_dJ4IJRZV-bKGH9UQf3aTnc").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_book))
    app.add_handler(CommandHandler("read", mark_read))
    app.add_handler(CommandHandler("list", list_books))
    app.add_handler(CommandHandler("list_read", list_read))
    app.add_handler(CommandHandler("list_unread", list_unread))
    app.add_handler(CommandHandler("clear", clear_books))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()

    try:
        await asyncio.Event().wait()
    except (KeyboardInterrupt, SystemExit):
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")

    await app.updater.stop()
    await app.stop()
    await app.shutdown()
    logger.info("–ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except RuntimeError as e:
        if "event loop is closed" in str(e):
            logger.warning("–¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π —É–∂–µ –∑–∞–∫—Ä—ã—Ç.")
        else:
            raise
