import logging
import sqlite3
import asyncio
from telegram import Update
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes
)

# üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# üìö –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("books.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS books (
    user_id INTEGER,
    title TEXT
)
""")
conn.commit()

# üìå –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏.\n"
        "–î–æ–±–∞–≤—å –∫–Ω–∏–≥—É —á–µ—Ä–µ–∑ /add <–Ω–∞–∑–≤–∞–Ω–∏–µ> –∏ –ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ /list."
    )

async def add_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    title = " ".join(context.args)
    if title:
        cursor.execute("INSERT INTO books (user_id, title) VALUES (?, ?)", (user_id, title))
        conn.commit()
        await update.message.reply_text(f"–ö–Ω–∏–≥–∞ ¬´{title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    else:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –ø–æ—Å–ª–µ /add")

async def list_books(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    cursor.execute("SELECT title FROM books WHERE user_id = ?", (user_id,))
    books = cursor.fetchall()
    if books:
        text = "\n".join(f"- {title[0]}" for title in books)
        await update.message.reply_text("–¢–≤–æ–∏ –∫–Ω–∏–≥–∏:\n" + text)
    else:
        await update.message.reply_text("–¢—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª –Ω–∏ –æ–¥–Ω–æ–π –∫–Ω–∏–≥–∏.")

async def clear_books(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    cursor.execute("DELETE FROM books WHERE user_id = ?", (user_id,))
    conn.commit()
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –æ—á–∏—â–µ–Ω.")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
async def main():
    app = ApplicationBuilder().token("7885426006:AAFg9OWfl4nw_dJ4IJRZV-bKGH9UQf3aTnc").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_book))
    app.add_handler(CommandHandler("list", list_books))
    app.add_handler(CommandHandler("clear", clear_books))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await app.initialize()
    await app.start()
    await app.updater.start_polling()

    # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ Ctrl+C –∏–ª–∏ Stop)
    try:
        await asyncio.Event().wait()
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

    logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
    await app.updater.stop()
    await app.stop()
    await app.shutdown()
    logger.info("–ë–æ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# üîÅ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤ PyCharm
if __name__ == "__main__":
    import asyncio

    try:
        asyncio.run(main())
    except RuntimeError as e:
        if "event loop is closed" in str(e):
            # –ë—ã–≤–∞–µ—Ç –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –∑–∞–ø—É—Å–∫–µ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö IDE
            logger.warning("–¶–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –±—ã–ª –∑–∞–∫—Ä—ã—Ç, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º...")
            import sys
            sys.exit(0)
        else:
            raise
