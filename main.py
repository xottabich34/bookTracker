import logging
import os
import re
import sqlite3

from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather
ALLOWED_IDS = set(map(int, os.getenv("ALLOWED_IDS", "").split(",")))  # –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–æ—Å—Ç—É–ø

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,  # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ‚Äî DEBUG
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",  # –§–æ—Ä–º–∞—Ç –ª–æ–≥–æ–≤ ignore
    datefmt="%Y-%m-%d %H:%M:%S"  # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
)
logger = logging.getLogger(__name__)  # –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥—É–ª—è

# --- –ù–ê–°–¢–†–û–ô–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• ---
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite (–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç)
conn = sqlite3.connect("books.db", check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–µ—Ä–∏–π –∫–Ω–∏–≥, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute("""
CREATE TABLE IF NOT EXISTS series (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE
)
""")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∫–Ω–∏–≥, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute("""
CREATE TABLE IF NOT EXISTS books (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT UNIQUE,
    description TEXT,
    image_blob BLOB,
    series_id INTEGER,
    series_order INTEGER,
    isbn TEXT,
    FOREIGN KEY (series_id) REFERENCES series(id)
)
""")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–≤—Ç–æ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute("""
CREATE TABLE IF NOT EXISTS authors (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE
)
""")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–≤—è–∑–∏ –∫–Ω–∏–≥ –∏ –∞–≤—Ç–æ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute("""
CREATE TABLE IF NOT EXISTS book_authors (
    book_id INTEGER,
    author_id INTEGER,
    PRIMARY KEY (book_id, author_id),
    FOREIGN KEY (book_id) REFERENCES books(id),
    FOREIGN KEY (author_id) REFERENCES authors(id)
)
""")

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å–≤—è–∑–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∫–Ω–∏–≥, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute("""
CREATE TABLE IF NOT EXISTS user_books (
    user_id INTEGER,
    book_id INTEGER,
    status TEXT CHECK(status IN ('planning', 'reading', 'finished', 'cancelled')),
    PRIMARY KEY (user_id, book_id),
    FOREIGN KEY (book_id) REFERENCES books(id)
)
""")
conn.commit()  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö


# --- –î–ï–ö–û–†–ê–¢–û–† –î–õ–Ø –ö–û–ù–¢–†–û–õ–Ø –î–û–°–¢–£–ü–ê ---
def owner_only(func):
    # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if user_id not in ALLOWED_IDS:
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
            return
        return await func(update, context)

    return wrapper


# --- –ú–ê–°–¢–ï–† –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ö–ù–ò–ì–ò ---
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ConversationHandler
ADD_TITLE, ADD_DESC, ADD_COVER, ADD_ISBN, ADD_AUTHORS, ADD_SERIES, ADD_SERIES_ORDER = range(7)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", "üìã –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥"],
        ["üìñ –ú–æ–∏ –∫–Ω–∏–≥–∏", "üîç –ü–æ–∏—Å–∫"],
        ["üè∑ –°—Ç–∞—Ç—É—Å—ã", "üìö –°–µ—Ä–∏–∏"],
        ["üì∑ –û–±–ª–æ–∂–∫–∏", "‚ÑπÔ∏è –û –∫–Ω–∏–≥–µ"]
    ],
    resize_keyboard=True  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
)


# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏
@owner_only
async def add_start(update: Update, _context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:", reply_markup=ReplyKeyboardRemove())
    return ADD_TITLE  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é ADD_TITLE


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏
@owner_only
async def add_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.text.strip():
        await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return ADD_TITLE
    context.user_data['new_book'] = {'title': update.message.text.strip()}  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:")
    return ADD_DESC  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é ADD_DESC


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∫–Ω–∏–≥–∏
@owner_only
async def add_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['new_book']['description'] = update.message.text.strip()  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
    await update.message.reply_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –æ–±–ª–æ–∂–∫—É –∫–Ω–∏–≥–∏ (–∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ):")
    return ADD_COVER  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é ADD_COVER


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏ –∫–Ω–∏–≥–∏
@owner_only
async def add_cover(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.photo:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ")
        return ADD_COVER
    
    try:
        file = await update.message.photo[-1].get_file()  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        byte_data = await file.download_as_bytearray()  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–π—Ç—ã
        context.user_data['new_book']['image_blob'] = byte_data  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ ISBN –∫–Ω–∏–≥–∏ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏, –æ—Ç–ø—Ä–∞–≤–∏–≤ '-'):")
        return ADD_ISBN  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é ADD_ISBN
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return ADD_COVER


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ ISBN
@owner_only
async def add_isbn(update: Update, context: ContextTypes.DEFAULT_TYPE):
    isbn = update.message.text.strip()
    isbn_clean = isbn.replace("-", "").replace(" ", "")  # –û—á–∏—Å—Ç–∫–∞ ISBN –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    if isbn != '-' and not re.match(r'^\d{9}[\dXx]$|^\d{13}$', isbn_clean):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ISBN
        await update.message.reply_text(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ISBN. –í–≤–µ–¥–∏ 10 –∏–ª–∏ 13 —Ü–∏—Ñ—Ä (–ø–æ—Å–ª–µ–¥–Ω—è—è –º–æ–∂–µ—Ç –±—ã—Ç—å X –¥–ª—è ISBN-10). –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:")
        return ADD_ISBN
    context.user_data['new_book']['isbn'] = None if isbn == '-' else isbn  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ISBN
    await update.message.reply_text("–í–≤–µ–¥–∏ –∞–≤—Ç–æ—Ä–æ–≤ –∫–Ω–∏–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
    return ADD_AUTHORS  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é ADD_AUTHORS


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∞–≤—Ç–æ—Ä–æ–≤
@owner_only
async def add_authors(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.text.strip():
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞:")
        return ADD_AUTHORS
    author_names = [a.strip() for a in update.message.text.split(',') if a.strip()]  # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤
    context.user_data['new_book']['authors'] = author_names  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–æ–≤
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∏ (–∏–ª–∏ '-' –µ—Å–ª–∏ –±–µ–∑ —Å–µ—Ä–∏–∏):")
    return ADD_SERIES  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é ADD_SERIES


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–µ—Ä–∏–∏
@owner_only
async def add_series(update: Update, context: ContextTypes.DEFAULT_TYPE):
    series_name = update.message.text.strip()
    if series_name != "-":  # –ï—Å–ª–∏ —Å–µ—Ä–∏—è —É–∫–∞–∑–∞–Ω–∞
        cursor.execute("INSERT OR IGNORE INTO series (name) VALUES (?)", (series_name,))  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–∏
        cursor.execute("SELECT id FROM series WHERE name = ?", (series_name,))  # –ü–æ–ª—É—á–µ–Ω–∏–µ ID —Å–µ—Ä–∏–∏
        series_id = cursor.fetchone()[0]
        context.user_data['new_book']['series_id'] = series_id  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–µ—Ä–∏–∏
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ –≤ —Å–µ—Ä–∏–∏:")
        return ADD_SERIES_ORDER  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é ADD_SERIES_ORDER
    else:  # –ï—Å–ª–∏ —Å–µ—Ä–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞
        context.user_data['new_book']['series_id'] = None
        context.user_data['new_book']['series_order'] = None
        return await finalize_book(update, context)  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥–∏


@owner_only
async def add_series_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        order = int(update.message.text.strip())
        context.user_data['new_book']['series_order'] = order
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä:")
        return ADD_SERIES_ORDER
    return await finalize_book(update, context)


async def finalize_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data = context.user_data['new_book']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–Ω–∏–≥–∞ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        cursor.execute("SELECT id FROM books WHERE title = ?", (data['title'],))
        existing_book = cursor.fetchone()
        if existing_book:
            await update.message.reply_text(f"–ö–Ω–∏–≥–∞ ¬´{data['title']}¬ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=menu_keyboard)
            return ConversationHandler.END
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É
        cursor.execute("""
            INSERT INTO books (title, description, image_blob, isbn, series_id, series_order)
            VALUES (?, ?, ?, ?, ?, ?)
        """, (data['title'], data['description'], data['image_blob'], data['isbn'], data.get('series_id'),
              data.get('series_order')))
        
        book_id = cursor.lastrowid
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤—Ç–æ—Ä–æ–≤
        for name in data['authors']:
            cursor.execute("INSERT OR IGNORE INTO authors (name) VALUES (?)", (name,))
            cursor.execute("SELECT id FROM authors WHERE name = ?", (name,))
            author_id = cursor.fetchone()[0]
            cursor.execute("INSERT OR IGNORE INTO book_authors (book_id, author_id) VALUES (?, ?)",
                           (book_id, author_id))
        
        conn.commit()
        await update.message.reply_text(f"–ö–Ω–∏–≥–∞ ¬´{data['title']}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ", reply_markup=menu_keyboard)
        return ConversationHandler.END
        
    except Exception as e:
        conn.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", reply_markup=menu_keyboard)
        return ConversationHandler.END


@owner_only
async def add_cancel(update: Update, _context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=menu_keyboard)
    return ConversationHandler.END


@owner_only
async def menu_handler(update: Update, _context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)


@owner_only
async def list_books(update: Update, _context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("SELECT title FROM books")
    rows = cursor.fetchall()
    if rows:
        text = "\n".join([row[0] for row in rows])
        await update.message.reply_text("üìö –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥:\n" + text)
    else:
        await update.message.reply_text("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø—É—Å—Ç–∞")


@owner_only
async def my_books(update: Update, _context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    cursor.execute("""
        SELECT b.title, ub.status FROM books b
        JOIN user_books ub ON b.id = ub.book_id
        WHERE ub.user_id = ?
        ORDER BY b.title
    """, (user_id,))
    rows = cursor.fetchall()
    
    if rows:
        status_emoji = {
            'planning': 'üìã',
            'reading': 'üìñ', 
            'finished': '‚úÖ',
            'cancelled': '‚ùå'
        }
        
        lines = []
        for title, status in rows:
            emoji = status_emoji.get(status, '‚ùì')
            status_text = {
                'planning': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ',
                'reading': '–ß–∏—Ç–∞—é',
                'finished': '–ü—Ä–æ—á–∏—Ç–∞–Ω–æ', 
                'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–æ'
            }.get(status, status)
            lines.append(f"{emoji} {title} ‚Äî {status_text}")
        
        await update.message.reply_text("üìñ –í–∞—à–∏ –∫–Ω–∏–≥–∏:\n\n" + "\n".join(lines))
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üè∑ –°—Ç–∞—Ç—É—Å—ã¬ª —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥–∏ –≤ —Å–≤–æ–π —Å–ø–∏—Å–æ–∫.")


@owner_only
async def list_series(update: Update, _context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("SELECT id, name FROM series")
    rows = cursor.fetchall()
    if not rows:
        await update.message.reply_text("–°–µ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    result = []
    for series_id, name in rows:
        cursor.execute("SELECT title FROM books WHERE series_id = ? ORDER BY series_order", (series_id,))
        books = [row[0] for row in cursor.fetchall()]
        result.append(f"üìö {name}:\n  " + "\n  ".join(books))
    await update.message.reply_text("\n\n".join(result))


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏
STATUS_SELECT_BOOK, STATUS_SELECT_STATUS = range(7, 9)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
status_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        ["üìñ –ß–∏—Ç–∞—é", "‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ"],
        ["üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ", "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ"]
    ],
    resize_keyboard=True
)


@owner_only
async def status_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–Ω–∏–≥–∏"""
    cursor.execute("SELECT title FROM books ORDER BY title")
    books = cursor.fetchall()
    if not books:
        await update.message.reply_text("–í –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –Ω–µ—Ç –∫–Ω–∏–≥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")
        return ConversationHandler.END
    
    book_list = "\n".join([f"{i+1}. {book[0]}" for i, book in enumerate(books)])
    context.user_data['available_books'] = [book[0] for book in books]
    
    await update.message.reply_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä):\n\n{book_list}",
        reply_markup=ReplyKeyboardRemove()
    )
    return STATUS_SELECT_BOOK


@owner_only
async def status_select_book(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏"""
    try:
        book_index = int(update.message.text.strip()) - 1
        available_books = context.user_data.get('available_books', [])
        
        if book_index < 0 or book_index >= len(available_books):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return STATUS_SELECT_BOOK
        
        selected_book = available_books[book_index]
        context.user_data['selected_book'] = selected_book
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–Ω–∏–≥–∏
        user_id = update.effective_user.id
        cursor.execute("""
            SELECT ub.status FROM user_books ub
            JOIN books b ON ub.book_id = b.id
            WHERE b.title = ? AND ub.user_id = ?
        """, (selected_book, user_id))
        current_status = cursor.fetchone()
        
        status_text = f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {current_status[0] if current_status else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}"
        await update.message.reply_text(
            f"–ö–Ω–∏–≥–∞: {selected_book}\n{status_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
            reply_markup=status_keyboard
        )
        return STATUS_SELECT_STATUS
        
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏:")
        return STATUS_SELECT_BOOK


@owner_only
async def status_select_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞"""
    status_mapping = {
        "üìñ –ß–∏—Ç–∞—é": "reading",
        "‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ": "finished", 
        "üìã –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ": "planning",
        "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ": "cancelled"
    }
    
    status_text = update.message.text.strip()
    if status_text not in status_mapping:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:")
        return STATUS_SELECT_STATUS
    
    selected_book = context.user_data['selected_book']
    status = status_mapping[status_text]
    user_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∫–Ω–∏–≥–∏
        cursor.execute("SELECT id FROM books WHERE title = ?", (selected_book,))
        book_id = cursor.fetchone()[0]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        cursor.execute("""
            INSERT OR REPLACE INTO user_books (user_id, book_id, status)
            VALUES (?, ?, ?)
        """, (user_id, book_id, status))
        
        conn.commit()
        await update.message.reply_text(
            f"–°—Ç–∞—Ç—É—Å –∫–Ω–∏–≥–∏ ¬´{selected_book}¬ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {status_text}",
            reply_markup=menu_keyboard
        )
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=menu_keyboard
        )
        return ConversationHandler.END


@owner_only
async def status_cancel(update: Update, _context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    await update.message.reply_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=menu_keyboard)
    return ConversationHandler.END


@owner_only
async def search_books(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∏—Å–∫ –∫–Ω–∏–≥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∞–≤—Ç–æ—Ä—É"""
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å>\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üîç –ü–æ–∏—Å–∫¬ª –∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
        return
    
    query = ' '.join(context.args)
    search_term = f"%{query}%"
    
    cursor.execute("""
        SELECT DISTINCT b.title, GROUP_CONCAT(a.name, ', ') as authors
        FROM books b
        LEFT JOIN book_authors ba ON b.id = ba.book_id
        LEFT JOIN authors a ON ba.author_id = a.id
        WHERE b.title LIKE ? OR a.name LIKE ?
        GROUP BY b.id, b.title
        ORDER BY b.title
    """, (search_term, search_term))
    
    results = cursor.fetchall()
    
    if results:
        lines = []
        for title, authors in results:
            author_text = f" ({authors})" if authors else ""
            lines.append(f"üìö {title}{author_text}")
        
        await update.message.reply_text(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´{query}¬ª:\n\n" + "\n".join(lines))
    else:
        await update.message.reply_text(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{query}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–∏—Å–∫–∞
SEARCH_QUERY = 9


@owner_only
async def search_start(update: Update, _context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:", reply_markup=ReplyKeyboardRemove())
    return SEARCH_QUERY


@owner_only
async def search_process(update: Update, _: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    query = update.message.text.strip()
    if not query:
        await update.message.reply_text("–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return SEARCH_QUERY
    
    search_term = f"%{query}%"
    
    cursor.execute("""
        SELECT DISTINCT b.title, GROUP_CONCAT(a.name, ', ') as authors
        FROM books b
        LEFT JOIN book_authors ba ON b.id = ba.book_id
        LEFT JOIN authors a ON ba.author_id = a.id
        WHERE b.title LIKE ? OR a.name LIKE ?
        GROUP BY b.id, b.title
        ORDER BY b.title
    """, (search_term, search_term))
    
    results = cursor.fetchall()
    
    if results:
        lines = []
        for title, authors in results:
            author_text = f" ({authors})" if authors else ""
            lines.append(f"üìö {title}{author_text}")
        
        await update.message.reply_text(
            f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´{query}¬ª:\n\n" + "\n".join(lines),
            reply_markup=menu_keyboard
        )
    else:
        await update.message.reply_text(
            f"–ü–æ –∑–∞–ø—Ä–æ—Å—É ¬´{query}¬ª –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
            reply_markup=menu_keyboard
        )
    
    return ConversationHandler.END


@owner_only
async def search_cancel(update: Update, _context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞"""
    await update.message.reply_text("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=menu_keyboard)
    return ConversationHandler.END


# --- BOT LAUNCH ---
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # Conversation handler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–Ω–∏–≥
    add_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("add", add_start),
                      MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É$"), add_start)],
        states={
            ADD_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_title)],
            ADD_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_description)],
            ADD_COVER: [MessageHandler(filters.PHOTO, add_cover)],
            ADD_ISBN: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_isbn)],
            ADD_AUTHORS: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_authors)],
            ADD_SERIES: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_series)],
            ADD_SERIES_ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_series_order)],
        },
        fallbacks=[CommandHandler("cancel", add_cancel)]
    )

    # Conversation handler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞–º–∏
    status_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("status", status_start),
                      MessageHandler(filters.Regex("^üè∑ –°—Ç–∞—Ç—É—Å—ã$"), status_start)],
        states={
            STATUS_SELECT_BOOK: [MessageHandler(filters.TEXT & ~filters.COMMAND, status_select_book)],
            STATUS_SELECT_STATUS: [MessageHandler(filters.TEXT & ~filters.COMMAND, status_select_status)],
        },
        fallbacks=[CommandHandler("cancel", status_cancel)]
    )

    # Conversation handler –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üîç –ü–æ–∏—Å–∫$"), search_start)],
        states={
            SEARCH_QUERY: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_process)],
        },
        fallbacks=[CommandHandler("cancel", search_cancel)]
    )

    app.add_handler(CommandHandler("start", menu_handler))
    app.add_handler(CommandHandler("menu", menu_handler))
    app.add_handler(add_conv_handler)
    app.add_handler(status_conv_handler)
    app.add_handler(search_conv_handler)
    app.add_handler(CommandHandler("list", list_books))
    app.add_handler(CommandHandler("series", list_series))
    app.add_handler(CommandHandler("my", my_books))
    app.add_handler(CommandHandler("search", search_books))
    app.add_handler(MessageHandler(filters.Regex("^üìã –°–ø–∏—Å–æ–∫ –∫–Ω–∏–≥$"), list_books))
    app.add_handler(MessageHandler(filters.Regex("^üìñ –ú–æ–∏ –∫–Ω–∏–≥–∏$"), my_books))
    app.add_handler(MessageHandler(filters.Regex("^üìö –°–µ—Ä–∏–∏$"), list_series))

    try:
        app.run_polling()
    except RuntimeError:
        import nest_asyncio
        nest_asyncio.apply()
        app.run_polling()


if __name__ == "__main__":
    import asyncio

    try:
        asyncio.get_event_loop().run_until_complete(main())
    except RuntimeError:
        import nest_asyncio

        nest_asyncio.apply()
        asyncio.get_event_loop().run_until_complete(main())
